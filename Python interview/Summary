#Python Knowledge Summary

1, python memory management (内存管理)
---Reference counting 引用计数
---Garbage Collection 垃圾回收
---内存池

所有的变量都可以理解是内存中一个对象的“引用”，或者，也可以看似c中void*的感觉


所谓IO密集型任务，是指磁盘IO、网络IO占主要的任务，计算量很小。比如请求网页、读写文件等。当然我们在Python中可以利用sleep达到IO密集型任务的目的。
所谓计算密集型任务，是指CPU计算占主要的任务，CPU一直处于满负荷状态。比如在一个很大的列表中查找元素（当然这不合理），复杂的加减乘除等

Python中比较常见的并发方式主要有两种：多线程和多进程。当然还有协程

多线程
多线程即在一个进程中启动多个线程执行任务。一般来说使用多线程可以达到并行的目的，但由于Python中使用了全局解释锁GIL的概念，导致Python中的多线程并不是并行执行，而是“交替执行”。类似于下图：


多进程
由于Python中GIL的原因，对于计算密集型任务，Python下比较好的并行方式是使用多进程，这样可以非常有效的使用CPU资源。当然同一时间执行的进程数量取决你电脑的CPU核心数。

















5 ,去除列表中的重复元素

#using set 
list(set(l))


## using dictionary

l1=['b','c','d','b','c','a','a']
l2= {}.fromkeys(l1).keys()
print l2



## using dictionary and keep the order

l1=['b','c','d','b','c','a','a']
l2=list(set(l1))
ls.sort(key=l1.index)
print l2





# list deduction

l1=['b','c','d','b','c','a','a']








10, 二分查找


def binarysearch(l,t):
	low, high = 0,len(l)-1
	while low< high:
		print low, high
		mid = (low + high)/2
		if l[mid] > t:
			high= mid
		elif l[mid]<t:
			low=mid+1
		else:
			return mid

	return low if l[low] == t else False








19, 求两个树是否相同


def isSametree(p,q):
	if p == None and q == None:
		return False
	elif p and q:
		return p.val == q.val and isSametree(p.leftchild,q.leftchild) and isSametree(p.rightchild,q.rightchild)
	else: 
		return False



		python语法以及其他基础部分

可变与不可变类型； 




浅拷贝与深拷贝的实现方式、区别；deepcopy如果你来设计，如何实现；





__new__() 与 __init__()的区别；


你知道几种设计模式；



编码和解码你了解过么； 
列表推导list comprehension和生成器的优劣； 
什么是装饰器；如果想在函数之后进行装饰，应该怎么做； 
手写个使用装饰器实现的单例模式； 
使用装饰器的单例和使用其他方法的单例，在后续使用中，有何区别； 

手写：正则邮箱地址； 
/^[a-z]([a-z0-9]*[-_]?[a-z0-9]+)*@([a-z0-9]*[-_]?[a-z0-9]+)+[\.][a-z]{2,3}([\.][a-z]{2})?$/i





介绍下垃圾回收：引用计数/分代回收/孤立引用环；


多进程与多线程的区别；CPU密集型适合用什么；


进程通信的方式有几种；


介绍下协程，为何比线程还快； 



range和xrange的区别（他妹的我学的py3…）； 
由于我有C/C++背景，因此要求用C来手写：将IP地址字符串（比如“172.0.0.1”）转为32位二进制数的函数。






算法排序部分

手写快排；堆排；几种常用排序的算法复杂度是多少；快排平均复杂度多少，最坏情况如何优化； 
手写：已知一个长度n的无序列表，元素均是数字，要求把所有间隔为d的组合找出来，你写的解法算法复杂度多少； 
手写：一个列表A=[A1，A2，…,An]，要求把列表中所有的组合情况打印出来； 
手写：用一行python写出1+2+3+…+10**8 ； 
手写python：用递归的方式判断字符串是否为回文； 
单向链表长度未知，如何判断其中是否有环； 
单向链表如何使用快速排序算法进行排序； 
手写：一个长度n的无序数字元素列表，如何求中位数，如何尽快的估算中位数，你的算法复杂度是多少； 
如何遍历一个内部未知的文件夹（两种树的优先遍历方式）

网络基础部分

TCP/IP分别在模型的哪一层； 
socket长连接是什么意思； 
select和epoll你了解么，区别在哪； 
TCP UDP区别；三次握手四次挥手讲一下； 
TIME_WAIT过多是因为什么； 
http一次连接的全过程：你来说下从用户发起request——到用户接收到response； 
http连接方式。get和post的区别，你还了解其他的方式么； 
restful你知道么； 
状态码你知道多少，比如200/403/404/504等等；

数据库部分

MySQL锁有几种；死锁是怎么产生的； 
为何，以及如何分区、分表； 
MySQL的char varchar text的区别； 
了解join么，有几种，有何区别，A LEFT JOIN B，查询的结果中，B没有的那部分是如何显示的（NULL）； 
索引类型有几种，BTree索引和hash索引的区别（我没答上来这俩在磁盘结构上的区别）； 
手写：如何对查询命令进行优化； 
NoSQL了解么，和关系数据库的区别；Redis有几种常用存储类型；

Linux部分

讲一下你常用的Linux/git命令和作用； 
查看当前进程是用什么命令，除了文件相关的操作外，你平时还有什么操作命令； 
（因为我本人Linux本身就很水，只会基本的操作，所以这部分面试官也基本没怎么问。。反正问了就大眼瞪小眼呗）

django项目部分

都是让简单的介绍下你在公司的项目，不管是不是后端相关的，主要是要体现出你干了什么； 
你在项目中遇到最难的部分是什么，你是怎么解决的； 
你看过django的admin源码么；看过flask的源码么；你如何理解开源； 
MVC / MTV； 
缓存怎么用； 
中间件是干嘛的； 
CSRF是什么，django是如何避免的；XSS呢； 
如果你来设计login，简单的说一下思路； 
session和cookie的联系与区别；session为什么说是安全的； 
uWSGI和Nginx的作用； 
（我发现基本不问django实现细节相关的东西。。或者问也问的很少，哎，之前准备的方向完全错了）